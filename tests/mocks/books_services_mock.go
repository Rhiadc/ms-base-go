package books_mock

// Code generated by MockGen. DO NOT EDIT.
// Source: domain/book/services/services.go

// Package mock_services is a generated GoMock package.
import (
        reflect "reflect"

        domain "github.com/Rhiadc/ms-base-go/domain/book"
        gomock "github.com/golang/mock/gomock"
)

// MockServices is a mock of Services interface.
type MockServices struct {
        ctrl     *gomock.Controller
        recorder *MockServicesMockRecorder
}

// MockServicesMockRecorder is the mock recorder for MockServices.
type MockServicesMockRecorder struct {
        mock *MockServices
}

// NewMockServices creates a new mock instance.
func NewMockServices(ctrl *gomock.Controller) *MockServices {
        mock := &MockServices{ctrl: ctrl}
        mock.recorder = &MockServicesMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServices) EXPECT() *MockServicesMockRecorder {
        return m.recorder
}

// CreateBook mocks base method.
func (m *MockServices) CreateBook(book domain.Book) (domain.Book, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "CreateBook", book)
        ret0, _ := ret[0].(domain.Book)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockServicesMockRecorder) CreateBook(book interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockServices)(nil).CreateBook), book)        
}

// DeleteBook mocks base method.
func (m *MockServices) DeleteBook(id string) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteBook", id)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockServicesMockRecorder) DeleteBook(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockServices)(nil).DeleteBook), id)
}

// GetBook mocks base method.
func (m *MockServices) GetBook(id string) (domain.Book, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetBook", id)
        ret0, _ := ret[0].(domain.Book)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockServicesMockRecorder) GetBook(id interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockServices)(nil).GetBook), id)
}

// GetBooks mocks base method.
func (m *MockServices) GetBooks() ([]domain.Book, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetBooks")
        ret0, _ := ret[0].([]domain.Book)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockServicesMockRecorder) GetBooks() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockServices)(nil).GetBooks))
}

// UpdateBook mocks base method.
func (m *MockServices) UpdateBook(id string, values map[string]interface{}) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "UpdateBook", id, values)
        ret0, _ := ret[0].(error)
        return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockServicesMockRecorder) UpdateBook(id, values interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockServices)(nil).UpdateBook), id, values)  
}